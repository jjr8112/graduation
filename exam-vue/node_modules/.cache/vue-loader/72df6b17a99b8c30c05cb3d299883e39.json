{"remainingRequest":"D:\\code\\exam_system\\exam-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\code\\exam_system\\exam-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\code\\exam_system\\exam-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\exam_system\\exam-vue\\src\\components\\ExamOnline.vue?vue&type=template&id=4db1a882&scoped=true&","dependencies":[{"path":"D:\\code\\exam_system\\exam-vue\\src\\components\\ExamOnline.vue","mtime":1645680824551},{"path":"D:\\code\\exam_system\\exam-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\code\\exam_system\\exam-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\code\\exam_system\\exam-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\code\\exam_system\\exam-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImVsLWNvbnRhaW5lciIsCiAgICBbCiAgICAgIF9jKAogICAgICAgICJlbC1oZWFkZXIiLAogICAgICAgIHsgYXR0cnM6IHsgaGVpZ2h0OiAiMjIwIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJlbC1zZWxlY3QiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsgY2xlYXJhYmxlOiAiIiwgcGxhY2Vob2xkZXI6ICLor7fpgInmi6nogIPor5XnsbvlnosiIH0sCiAgICAgICAgICAgICAgb246IHsgY2hhbmdlOiBfdm0udHlwZUNoYW5nZSB9LAogICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnF1ZXJ5SW5mby5leGFtVHlwZSwKICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnF1ZXJ5SW5mbywgImV4YW1UeXBlIiwgJCR2KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJxdWVyeUluZm8uZXhhbVR5cGUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBfdm0uX2woX3ZtLmV4YW1UeXBlLCBmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKCJlbC1vcHRpb24iLCB7CiAgICAgICAgICAgICAgICBrZXk6IGl0ZW0udHlwZSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGxhYmVsOiBpdGVtLmluZm8sIHZhbHVlOiBpdGVtLnR5cGUgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImVsLWlucHV0IiwgewogICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWxlZnQiOiAiNXB4Iiwgd2lkdGg6ICIyMjBweCIgfSwKICAgICAgICAgICAgYXR0cnM6IHsgcGxhY2Vob2xkZXI6ICLogIPor5XlkI3np7AiLCAicHJlZml4LWljb24iOiAiZWwtaWNvbi1zZWFyY2giIH0sCiAgICAgICAgICAgIG9uOiB7IGJsdXI6IF92bS5nZXRFeGFtSW5mbyB9LAogICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgIHZhbHVlOiBfdm0ucXVlcnlJbmZvLmV4YW1OYW1lLAogICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5xdWVyeUluZm8sICJleGFtTmFtZSIsICQkdikKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICJxdWVyeUluZm8uZXhhbU5hbWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJlbC1tYWluIiwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImVsLXRhYmxlIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImxvYWRpbmciLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1sb2FkaW5nIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5sb2FkaW5nLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibG9hZGluZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHJlZjogInF1ZXN0aW9uVGFibGUiLAogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAwJSIgfSwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgImhpZ2hsaWdodC1jdXJyZW50LXJvdyI6ICIiLAogICAgICAgICAgICAgICAgYm9yZGVyOiB0cnVlLAogICAgICAgICAgICAgICAgZGF0YTogX3ZtLmV4YW1JbmZvLAogICAgICAgICAgICAgICAgInRvb2x0aXAtZWZmZWN0IjogImRhcmsiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImVsLXRhYmxlLWNvbHVtbiIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGFsaWduOiAiY2VudGVyIiwgbGFiZWw6ICLogIPor5XlkI3np7AiIH0sCiAgICAgICAgICAgICAgICBzY29wZWRTbG90czogX3ZtLl91KFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGtleTogImRlZmF1bHQiLAogICAgICAgICAgICAgICAgICAgIGZuOiBmdW5jdGlvbihzY29wZSkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtfdm0uX3YoIiAiICsgX3ZtLl9zKHNjb3BlLnJvdy5leGFtTmFtZSkgKyAiICIpXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZWwtdGFibGUtY29sdW1uIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiLCBsYWJlbDogIuiAg+ivleexu+WeiyIgfSwKICAgICAgICAgICAgICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAga2V5OiAiZGVmYXVsdCIsCiAgICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uKHNjb3BlKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUucm93LnR5cGUgPT09IDEgPyAi5a6M5YWo5YWs5byAIiA6ICLpnIDopoHlr4bnoIEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJlbC10YWJsZS1jb2x1bW4iLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyBhbGlnbjogImNlbnRlciIsIGxhYmVsOiAi6ICD6K+V5pe26Ze0IiB9LAogICAgICAgICAgICAgICAgc2NvcGVkU2xvdHM6IF92bS5fdShbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBrZXk6ICJkZWZhdWx0IiwKICAgICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24oc2NvcGUpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5yb3cuc3RhcnRUaW1lICE9PSAibnVsbCIgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5yb3cuZW5kVGltZSAhPT0gIm51bGwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzY29wZS5yb3cuc3RhcnRUaW1lICsgIiB+IiArIHNjb3BlLnJvdy5lbmRUaW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAi5LiN6ZmQ5pe2IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZWwtdGFibGUtY29sdW1uIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiLCBsYWJlbDogIuiAg+ivleaXtumVvyIgfSwKICAgICAgICAgICAgICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAga2V5OiAiZGVmYXVsdCIsCiAgICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uKHNjb3BlKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKHNjb3BlLnJvdy5kdXJhdGlvbiArICLliIbpkp8iKSArICIgIikKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImVsLXRhYmxlLWNvbHVtbiIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICAgICAgICAgICAgcHJvcDogInRvdGFsU2NvcmUiLAogICAgICAgICAgICAgICAgICBsYWJlbDogIuiAg+ivleaAu+WIhiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZWwtdGFibGUtY29sdW1uIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiLCBwcm9wOiAicGFzc1Njb3JlIiwgbGFiZWw6ICLlj4rmoLzliIbmlbAiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiZWwtdGFibGUtY29sdW1uIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiLCBsYWJlbDogIuaTjeS9nCIgfSwKICAgICAgICAgICAgICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAga2V5OiAiZGVmYXVsdCIsCiAgICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uKHNjb3BlKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZWwtYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAic21hbGwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogIV92bS5jaGVja0V4YW0oc2NvcGUucm93KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogX3ZtLmNoZWNrRXhhbShzY29wZS5yb3cpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAiZWwtaWNvbi1jYXJldC1yaWdodCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICJlbC1pY29uLWNsb3NlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogX3ZtLmNoZWNrRXhhbShzY29wZS5yb3cpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAicHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICJpbmZvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnRvU3RhcnRFeGFtKHNjb3BlLnJvdykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5jaGVja0V4YW0oc2NvcGUucm93KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICLljrvogIPor5UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogIuaaguS4jeW8gOaUviIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJlbC1wYWdpbmF0aW9uIiwgewogICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIyNXB4IiB9LAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICJjdXJyZW50LXBhZ2UiOiBfdm0ucXVlcnlJbmZvLnBhZ2VObywKICAgICAgICAgICAgICAicGFnZS1zaXplcyI6IFsxMCwgMjAsIDMwLCA1MF0sCiAgICAgICAgICAgICAgInBhZ2Utc2l6ZSI6IF92bS5xdWVyeUluZm8ucGFnZVNpemUsCiAgICAgICAgICAgICAgbGF5b3V0OiAidG90YWwsIHNpemVzLCBwcmV2LCBwYWdlciwgbmV4dCwganVtcGVyIiwKICAgICAgICAgICAgICB0b3RhbDogX3ZtLnRvdGFsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgInNpemUtY2hhbmdlIjogX3ZtLmhhbmRsZVNpemVDaGFuZ2UsCiAgICAgICAgICAgICAgImN1cnJlbnQtY2hhbmdlIjogX3ZtLmhhbmRsZUN1cnJlbnRDaGFuZ2UKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImVsLWRpYWxvZyIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgdGl0bGU6ICLogIPor5Xmj5DnpLoiLAogICAgICAgICAgICB2aXNpYmxlOiBfdm0uc3RhcnRFeGFtRGlhbG9nLAogICAgICAgICAgICBjZW50ZXI6ICIiLAogICAgICAgICAgICB3aWR0aDogIjUwJSIKICAgICAgICAgIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICAidXBkYXRlOnZpc2libGUiOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICBfdm0uc3RhcnRFeGFtRGlhbG9nID0gJGV2ZW50CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJlbC1hbGVydCIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB0aXRsZToKICAgICAgICAgICAgICAgICLngrnlh7tg5byA5aeL6ICD6K+VYOWQjuWwhuiHquWKqOi/m+WFpeiAg+ivle+8jOivt+ivmuS/oeiAg+ivle+8jOiAg+ivlei/h+eoi+S4reWPr+iDveS8muWvueeUqOaIt+ihjOS4uuOAgeeUqOaIt+inhumikei/m+ihjOaIquWbvumHh+agt++8jOivt+efpeaCie+8gSIsCiAgICAgICAgICAgICAgdHlwZTogImVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJlbC1jYXJkIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIyNXB4IiB9IH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLogIPor5XlkI3np7DvvJoiKV0pLAogICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jdXJyZW50U2VsZWN0ZWRFeGFtLmV4YW1OYW1lKSArICIgIiksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIuiAg+ivleaPj+i/sO+8miIpXSksCiAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmN1cnJlbnRTZWxlY3RlZEV4YW0uZXhhbURlc2MpICsgIiAiKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi6ICD6K+V5pe26ZW/77yaIildKSwKICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uY3VycmVudFNlbGVjdGVkRXhhbS5kdXJhdGlvbiArICLliIbpkp8iKSArICIgIiksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIuivleWNt+aAu+WIhu+8miIpXSksCiAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmN1cnJlbnRTZWxlY3RlZEV4YW0udG90YWxTY29yZSkgKyAi5YiGICIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLlj4rmoLzliIbmlbDvvJoiKV0pLAogICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jdXJyZW50U2VsZWN0ZWRFeGFtLnBhc3NTY29yZSkgKyAi5YiGICIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLlvIDmlL7nsbvlnovvvJoiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiAiICsKICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgX3ZtLmN1cnJlbnRTZWxlY3RlZEV4YW0udHlwZSA9PT0gMiA/ICLpnIDopoHlr4bnoIEiIDogIuWujOWFqOWFrOW8gCIKICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgIiAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRpYWxvZy1mb290ZXIiLAogICAgICAgICAgICAgIGF0dHJzOiB7IHNsb3Q6ICJmb290ZXIiIH0sCiAgICAgICAgICAgICAgc2xvdDogImZvb3RlciIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImVsLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgX3ZtLnN0YXJ0RXhhbURpYWxvZyA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigi6L+UIOWbniIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZWwtYnV0dG9uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInByaW1hcnkiIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS4kcm91dGVyLnB1c2goCiAgICAgICAgICAgICAgICAgICAgICAgICIvZXhhbS8iICsgX3ZtLmN1cnJlbnRTZWxlY3RlZEV4YW0uZXhhbUlkCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigi5byA5aeL6ICD6K+VIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICkKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}